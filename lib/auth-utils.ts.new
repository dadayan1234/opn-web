// Client-side authentication utilities

// Check if the user is authenticated
export const isAuthenticated = (): boolean => {
  // No longer bypass authentication in development mode
  // This ensures we're using real authentication

  if (typeof window === 'undefined') return false

  try {
    // Limit console logging to reduce noise
    const debugMode = false;
    
    // Check localStorage first (primary storage)
    const token = localStorage.getItem('token')
    const authToken = localStorage.getItem('auth_token')

    if (authToken) {
      // Validate token format (simple check)
      if (authToken.length < 10) {
        if (debugMode) console.warn('Auth check: Invalid token format in localStorage')
        return false
      }

      // Log authentication status for debugging
      if (debugMode) console.log('Auth check: Valid auth_token found in localStorage')
      return true
    }

    if (token) {
      // Validate token format (simple check)
      if (token.length < 10) {
        if (debugMode) console.warn('Auth check: Invalid token format in localStorage')
        return false
      }

      // Log authentication status for debugging
      if (debugMode) console.log('Auth check: Valid token found in localStorage')
      return true
    }

    // Fallback to cookies
    const cookieToken = document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1")
    const cookieAuthToken = document.cookie.replace(/(?:(?:^|.*;\s*)auth_token\s*\=\s*([^;]*).*$)|^.*$/, "$1")

    if (cookieAuthToken && cookieAuthToken.length >= 10) {
      if (debugMode) console.log('Auth check: Valid auth_token found in cookies')
      return true
    }

    if (cookieToken && cookieToken.length >= 10) {
      if (debugMode) console.log('Auth check: Valid token found in cookies')
      return true
    }

    if (debugMode) console.log('Auth check: No valid token found')
    return false
  } catch (error) {
    console.error('Error checking authentication:', error)
    return false
  }
}

// Set authentication tokens
export const setAuthTokens = (token: string, refreshToken?: string): void => {
  if (typeof window === 'undefined') return

  const debugMode = false;
  if (debugMode) console.log('Setting auth tokens:', token ? 'Token present' : 'No token')

  try {
    // Store in localStorage - use both formats for compatibility
    localStorage.setItem('token', token)
    localStorage.setItem('auth_token', token)

    if (refreshToken) {
      localStorage.setItem('refreshToken', refreshToken)
    }

    // Store in cookies with secure attributes
    const cookieOptions = 'path=/;max-age=2592000;SameSite=Lax' // 30 days, more compatible SameSite
    document.cookie = `token=${token};${cookieOptions}`
    document.cookie = `auth_token=${token};${cookieOptions}`

    if (refreshToken) {
      document.cookie = `refreshToken=${refreshToken};${cookieOptions}`
    }

    if (debugMode) console.log('Auth tokens set successfully')
  } catch (error) {
    console.error('Error setting auth tokens:', error)
  }
}

// Remove authentication tokens
export const removeAuthTokens = (): void => {
  if (typeof window === 'undefined') return

  // Remove from localStorage
  localStorage.removeItem('token')
  localStorage.removeItem('auth_token')
  localStorage.removeItem('refreshToken')

  // Remove from cookies
  document.cookie = "token=;path=/;expires=Thu, 01 Jan 1970 00:00:00 GMT"
  document.cookie = "auth_token=;path=/;expires=Thu, 01 Jan 1970 00:00:00 GMT"
  document.cookie = "refreshToken=;path=/;expires=Thu, 01 Jan 1970 00:00:00 GMT"
}

// Get the authentication token
export const getAuthToken = (): string | null => {
  if (typeof window === 'undefined') {
    return null;
  }

  const debugMode = false;
  if (debugMode) console.log('[Auth] Attempting to retrieve auth token...');

  // Check localStorage first for auth_token (new format)
  const authToken = localStorage.getItem('auth_token');
  if (authToken) {
    if (debugMode) console.log('[Auth] Found auth_token in localStorage');
    
    // If the token doesn't have the Bearer prefix, add it
    if (!authToken.startsWith('Bearer ')) {
      const tokenWithPrefix = `Bearer ${authToken}`;
      if (debugMode) console.log('[Auth] Added Bearer prefix to auth_token');
      return tokenWithPrefix;
    }
    if (debugMode) console.log('[Auth] auth_token already has Bearer prefix');
    return authToken;
  }

  // Check localStorage for token (old format)
  const token = localStorage.getItem('token');
  if (token) {
    if (debugMode) console.log('[Auth] Found token in localStorage');
    
    // If the token doesn't have the Bearer prefix, add it
    if (!token.startsWith('Bearer ')) {
      const tokenWithPrefix = `Bearer ${token}`;
      if (debugMode) console.log('[Auth] Added Bearer prefix to token');
      return tokenWithPrefix;
    }
    if (debugMode) console.log('[Auth] token already has Bearer prefix');
    return token;
  }

  // Fallback to cookies
  const cookieAuthToken = document.cookie.replace(/(?:(?:^|.*;\s*)auth_token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
  if (cookieAuthToken) {
    if (debugMode) console.log('[Auth] Found auth_token in cookies');
    
    // If the token doesn't have the Bearer prefix, add it
    if (!cookieAuthToken.startsWith('Bearer ')) {
      const tokenWithPrefix = `Bearer ${cookieAuthToken}`;
      if (debugMode) console.log('[Auth] Added Bearer prefix to cookie auth_token');
      return tokenWithPrefix;
    }
    if (debugMode) console.log('[Auth] cookie auth_token already has Bearer prefix');
    return cookieAuthToken;
  }

  const cookieToken = document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
  if (cookieToken) {
    if (debugMode) console.log('[Auth] Found token in cookies');
    
    // If the token doesn't have the Bearer prefix, add it
    if (!cookieToken.startsWith('Bearer ')) {
      const tokenWithPrefix = `Bearer ${cookieToken}`;
      if (debugMode) console.log('[Auth] Added Bearer prefix to cookie token');
      return tokenWithPrefix;
    }
    if (debugMode) console.log('[Auth] cookie token already has Bearer prefix');
    return cookieToken;
  }

  if (debugMode) console.log('[Auth] No token found in localStorage or cookies');
  return null;
}

// Get the refresh token
export const getRefreshToken = (): string | null => {
  if (typeof window === 'undefined') return null

  // Check localStorage first
  const refreshToken = localStorage.getItem('refreshToken')
  if (refreshToken) return refreshToken

  // Fallback to cookies
  return document.cookie.replace(/(?:(?:^|.*;\s*)refreshToken\s*\=\s*([^;]*).*$)|^.*$/, "$1") || null
}
